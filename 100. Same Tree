/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    // public int maxDepth(TreeNode root, TreeNode pLeft, TreeNode pRight, TreeNode qLeft , TreeNode qRight){pLeft = maxDepth(root.left);
    //     int pRight = maxDepth(root.right);
    //     int qLeft = maxDepth(root.left);
    //     int qRight = maxDepth(root.right);

    // }
    public boolean isSameTree(TreeNode p, TreeNode q) {

        if(p== null && q == null){
            return true;
        }

        if(p == null || q == null){
            return false;
        }
        if(p.val != q.val){
            return false;
        }

        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
    // maxDepth(TreeNode root, TreeNode pLeft, TreeNode pRight, TreeNode qLeft , TreeNode qRight );
    //     if((pLeft == qLeft) && (pRight = qRight)){
    //     return true;
    //     }

    //     return false;
    }
}
